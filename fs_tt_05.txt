#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform vec3 viewPos;

uniform sampler2D first_texture;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  //vec3 direction;
  float constant;
  float linear;
  float quadratic;
  //spotlight
  vec3 direction;
  float cutOff;
  float outerCutOff;
};

uniform Light pointLight[4];  

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

vec3 standardLight(Light light){
  // ambient
  vec3 ambient = light.ambient * material.ambient * texture(first_texture, aTexCoord).rgb;
  
  // diffuse
  vec3 norm = normalize(aNormal);
  vec3 lightDir = normalize(light.position - aPos);  
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * (diff * material.diffuse) * texture(first_texture, aTexCoord).rgb;
  
  // specular 
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);  
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * (spec * material.specular);


   // attenuation
  float distance    = length(light.position - aPos);
  float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
  ambient  *= attenuation; 
  diffuse  *= attenuation;
  specular *= attenuation; 

  vec3 result = ambient + diffuse + specular;
  return result;
}

vec3 spotLight(Light light){
  // ambient
  vec3 ambient = light.ambient * material.ambient * texture(first_texture, aTexCoord).rgb;
  
  // diffuse
  vec3 norm = normalize(aNormal);
  vec3 lightDir = normalize(light.position - aPos);  
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * (diff * material.diffuse) * texture(first_texture, aTexCoord).rgb;
  
  // specular 
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);  
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * (spec * material.specular);


   // attenuation
  float distance    = length(light.position - aPos);
  float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
  ambient  *= attenuation; 
  diffuse  *= attenuation;
  specular *= attenuation;


  //spotlight
  float theta = dot(lightDir, normalize(-light.direction));
  float epsilon   = light.cutOff - light.outerCutOff;
  float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);   
  if(theta > light.cutOff) 
  {       
    diffuse  *= intensity;
    specular *= intensity;
    vec3 result = ambient + diffuse + specular;
    return result;
    //fragColor = vec4(result, 1.0);
  }
  
  return vec3(0.0,0.0,0.0);
}

void main() {
  vec3 result = standardLight(pointLight[0]);
  result += standardLight(pointLight[1]);
  result += spotLight(pointLight[2]);
  result += spotLight(pointLight[3]);
  fragColor = vec4(result, 1.0);
}